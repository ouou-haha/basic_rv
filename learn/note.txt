 流程
                 +---------------------------+
                 |   上电 / 复位（QEMU virt） |
                 +-------------+-------------+
                               |
                               v
                   +-----------+-----------+
                   |   _start (start.S)   |
                   +-----------+-----------+
                               |
               设置 SP = _stack_top（统一栈顶）
                               |
                               v
                   读取 mhartid -> a0
                      |               |
       hart != 0 ----/                \---- hart == 0
        |                                   |
        v                                   v
  WFI 死循环停车                       设置 mtvec = trap_vec
        |                                   |
        |                          清零 .bss 段 [__bss_start, __bss_end)
        |                                   |
        |                                   v
        |                              跳转到 main()
        |                                   |
        |                                   v
        |                      +------------+------------+
        |                      |          main.c         |
        |                      +------------+------------+
        |                                   |
        |                  uart_init()  /  打印欢迎信息
        |                                   |
        |                  clint_timer_init(tick)  → 设定 mtimecmp
        |                                   |
        |                 开中断：csrs mie.MTIE / mstatus.MIE
        |                                   |
        |                 主循环：轮询 UART / 每100 tick 打点
        |                                   |
        |                         （发生定时器中断）
        |                                   |
        |                                   v
        |                      硬件：跳转到 mtvec = trap_vec
        |                                   |
        |                                   v
        |                  +----------------+----------------+
        |                  |         trap_vec (trap.c)       |
        |                  +----------------+----------------+
        |                                   |
        |        预留栈空间 → 保存 ra/a0/a1/a2 → 读 mcause/mepc/mtval
        |                                   |
        |                         call trap_handler(...)
        |                                   |
        |                  恢复 ra / 还原栈指针 → mret 返回
        |                                   |
        |                                   v
        |                  +----------------+----------------+
        |                  |     trap_handler (trap.c)       |
        |                  +----------------+----------------+
        |                                   |
        |         if (mcause 为中断且为 MTIE=7)：
        |             g_ticks++；
        |             clint_timer_ack()（续约下一次 mtimecmp）
        |         else：打印异常信息并停车
        |                                   |
        +-----------------------------------+
                                            |
                                            v
                                  返回 main() 主循环


物理地址 ↑（高地址）
          |
0x8800_0000 ──────────────────────────────────────────
            |               栈 (Stack)                |
            |   从 _stack_top 向下增长（函数调用等）    |
            |-----------------------------------------|
            |             （空闲空间）                |
            |-----------------------------------------|
            |               .bss 段                   |
            |  __bss_start: 未初始化全局/静态变量      |
            |               （NOLOAD，运行时清零）    |
            |  __bss_end:   bss 段结束                 |
            |-----------------------------------------|
            |               .data 段                  |
            |  已初始化的全局/静态变量，镜像中有初值   |
            |  启动时从镜像复制到 RAM 中               |
            |-----------------------------------------|
            |               .text 段                  |
            |  代码（.text.boot 启动、普通代码、       |
            |  .rodata 常量）                          |
0x8000_0000 ──────────────────────────────────────────
            ORIGIN(RAM) = 0x80000000
对应关系：

.text 段 → 0x80000000 起

.data 段 → .text 后按 8 字节对齐

.bss 段 → .data 后按 8 字节对齐

_stack_top → RAM 顶端（128M 的最高地址）

栈向下增长，位于 .bss 段之上

